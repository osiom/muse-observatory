version: '3.8'

services:
  # Volume initialization service to ensure proper permissions
  init-volume:
    image: alpine:latest
    container_name: muse-volume-init
    command: sh -c "mkdir -p /db_files && chmod -R 777 /db_files && echo 'Volume initialized with proper permissions'"
    volumes:
      - ./db_files:/db_files
    restart: "no"
    # Minimal resources for initialization
    mem_limit: 64M

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=${ENVIRONMENT:-production}
    container_name: muse-observatory-app
    restart: unless-stopped
    depends_on:
      - init-volume
    ports:
      - "${APP_PORT:-8080}:8080"
    volumes:
      # Mount source code in development
      - ${PWD}:/app${MOUNT_SUFFIX:-}
      # Mount local db_files directory directly
      - ./db_files:/app/db_files:rw
    environment:
      # Application configuration
      - HOST=0.0.0.0
      - PORT=8080
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - DB_DIR=/app/db_files

      # Python configuration
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=/app

      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - muse-network
    # Moderate resource limits for 4GB systems
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    # Health check with longer intervals to reduce overhead
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: python app.py

  # Daily fact generator using a dedicated cron container
  scheduler:
    image: alpine:latest
    container_name: muse-fact-scheduler
    restart: unless-stopped
    depends_on:
      - app
    volumes:
      - ${PWD}:/app:ro
      - ./db_files:/app/db_files:rw
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DB_DIR=/app/db_files
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PYTHONPATH=/app
    networks:
      - muse-network
    command: >
      sh -c '
        # Install required packages
        apk add --no-cache python3 py3-pip docker-cli tzdata

        # Install Python requirements
        pip3 install --no-cache-dir -r /app/requirements.txt

        # Create the cron job file
        mkdir -p /etc/crontabs
        echo "1 0 * * * cd /app && python3 /app/generate_fact.py && docker restart muse-observatory-app" > /etc/crontabs/root

        # Display the crontab for verification
        echo "Installed crontab:"
        cat /etc/crontabs/root

        # Start crond in foreground
        crond -f -l 8
      '

networks:
  muse-network:
    driver: bridge
    name: muse_observatory_network

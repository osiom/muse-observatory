version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: muse-observatory-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-museuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-musepassword}
      POSTGRES_DB: ${DB_NAME:-muse_observatory}
      # Performance tuning
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      # Optional: custom PostgreSQL config
      # - ./db/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-museuser} -d ${DB_NAME:-muse_observatory}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - muse-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT=${ENVIRONMENT:-production}
    container_name: muse-observatory-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${APP_PORT:-8080}:8080"
    volumes:
      # Only mount source code in development
      - ${PWD}:/app${MOUNT_SUFFIX:-}
    environment:
      # Database configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-muse_observatory}
      - DB_USER=${DB_USER:-museuser}
      - DB_PASSWORD=${DB_PASSWORD:-musepassword}

      # Application configuration
      - HOST=0.0.0.0
      - PORT=8080
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}

      # Python configuration
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=/app

      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - muse-network
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: python app.py

networks:
  muse-network:
    driver: bridge
    name: muse_observatory_network

volumes:
  postgres-data:
    name: muse_observatory_data
    driver: local
